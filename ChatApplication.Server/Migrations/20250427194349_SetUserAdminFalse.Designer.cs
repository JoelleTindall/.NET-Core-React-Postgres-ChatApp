// <auto-generated />
using System;
using ChatApplication.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ChatApplication.Server.Migrations
{
    [DbContext(typeof(ChatAppContext))]
    [Migration("20250427194349_SetUserAdminFalse")]
    partial class SetUserAdminFalse
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatApplication.Server.Models.Avatar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Avatars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilePath = "img/cat.png"
                        },
                        new
                        {
                            Id = 2,
                            FilePath = "img/egg.png"
                        },
                        new
                        {
                            Id = 3,
                            FilePath = "img/mad.png"
                        });
                });

            modelBuilder.Entity("ChatApplication.Server.Models.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("ChatApplication.Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AvatarId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AvatarId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvatarId = 1,
                            CreatedAt = new DateTime(2025, 4, 27, 19, 43, 48, 869, DateTimeKind.Utc).AddTicks(8168),
                            IsAdmin = true,
                            PasswordHash = "6PIoyjwA5TSKVuYhKKBnInXmnsRFCLSBEsObl/HwK/r0QYzE6pXgqLL5OLNZ3JCw0aXThIDFG6GCh0B8jVVkEg==",
                            PasswordSalt = "uODGNtsy8eSINKr2xruuVtla1WVNBWl7G2iLHj3Lv1qmqAM104yHCWqHfiHN5JZV2HoDEXVH/KPVlrFJz8u6GxIKJf7t87GB0PEN5/phZ3i++7TRRMz44zb4HPWSqG1avHwCm51ZcK4jGeykWzcOJIn5ltJK3zw7jOxa4M+fqOs=",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("ChatApplication.Server.Models.Chat", b =>
                {
                    b.HasOne("ChatApplication.Server.Models.User", "User")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ChatApplication.Server.Models.User", b =>
                {
                    b.HasOne("ChatApplication.Server.Models.Avatar", "Avatar")
                        .WithMany()
                        .HasForeignKey("AvatarId");

                    b.Navigation("Avatar");
                });

            modelBuilder.Entity("ChatApplication.Server.Models.User", b =>
                {
                    b.Navigation("Chats");
                });
#pragma warning restore 612, 618
        }
    }
}
